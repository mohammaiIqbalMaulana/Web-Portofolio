// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  EDITOR
}

enum Locale {
  id
  en
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  passwordHash  String
  role          Role      @default(ADMIN)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id             String    @id @default(cuid())
  slug           String    @unique
  repoUrl        String?
  demoUrl        String?
  coverImageUrl  String?
  published      Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  translations   ProjectTranslation[]
  skills         ProjectSkill[]
}

model ProjectTranslation {
  id        String   @id @default(cuid())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  locale    Locale
  title     String
  summary   String?
  content   String?  @db.LongText

  @@unique([projectId, locale])
}

model Skill {
  id           String   @id @default(cuid())
  slug         String   @unique
  icon         String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  translations SkillTranslation[]
  projects     ProjectSkill[]
}

model SkillTranslation {
  id       String  @id @default(cuid())
  skill    Skill   @relation(fields: [skillId], references: [id], onDelete: Cascade)
  skillId  String
  locale   Locale
  name     String
  description String?

  @@unique([skillId, locale])
}

model Media {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  width     Int?
  height    Int?
  createdAt DateTime @default(now())
}

model ProjectSkill {
  id        String  @id @default(cuid())
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  skill     Skill   @relation(fields: [skillId], references: [id], onDelete: Cascade)
  skillId   String

  @@unique([projectId, skillId])
}
